{"mappings":"yiBAUA,MAAMA,GAAO,EAAAC,EAAAC,WACPC,EAAa,IAAI,EAAAC,EAAAF,SACjBG,EAAS,IAAI,EAAAC,EAAAJ,SACbK,EAAS,IAAI,EAAAC,EAAAN,SAEnBF,EAAKS,WAAWC,iBAAiB,UAQjCC,eAAwBC,GACtBA,EAAEC,iBACFV,EAAWW,MAAQF,EAAEG,cAAcC,SAASC,YAAYC,OAExD,EAAAC,EAAAC,yBACAjB,EAAWkB,YAEX,IACE,MAAMC,QAAanB,EAAWoB,kBAE9B,GAAmB,IAAfD,EAAKE,QAAgBrB,EAAWW,MAClC,OAAOT,EAAOoB,eAGhBpB,EAAOqB,kBAAkBJ,EAAKK,YAC9B,EAAAR,EAAAS,wBAAuBN,E,CACvB,MAAOO,GACPC,QAAQD,MAAMA,E,KAxBlB7B,EAAK+B,YAAYrB,iBAAiB,SAAS,KACzCH,EAAOwB,aAAa,IAEtBC,SAAStB,iBAAiB,UAAU,KAClCH,EAAO0B,mBAAmB,IAwB5B,MAmBMC,EAAW,IAAIC,sBAnBLC,IACdA,EAAQC,SAAQ1B,MAAM2B,IACpB,GAAIA,EAAMC,gBAAkBpC,EAAWW,MAAO,CAC5C,MAAMQ,QAAanB,EAAWoB,mBAE9B,EAAAJ,EAAAS,wBAAuBN,GAEnBA,EAAKK,WAAaxB,EAAWqC,YAAcrC,EAAWsC,WACxDP,EAASQ,UAAU1C,EAAK2C,UACxBtC,EAAOuC,qB,IAGX,GAGY,CACdC,WAAY,UAIdX,EAASY,QAAQ9C,EAAK2C","sources":["src/js/02-infinite-scroll.js"],"sourcesContent":["import '../sass/index.scss';\nimport getRefs from './components/getRefs';\nimport ApiService from './components/api-service';\nimport {\n  createMarkupPhotoCards,\n  clearMarkupPhotoCards,\n} from './components/markup-cards';\nimport NotifyMessages from './components/notify-messages';\nimport Scroll from './components/scrollTo';\n\nconst refs = getRefs();\nconst apiServise = new ApiService();\nconst notify = new NotifyMessages();\nconst scroll = new Scroll();\n\nrefs.searchForm.addEventListener('submit', onSearch);\nrefs.scrollToTop.addEventListener('click', () => {\n  scroll.scrollToTop();\n});\ndocument.addEventListener('scroll', () => {\n  scroll.handleScrollToTop();\n});\n\nasync function onSearch(e) {\n  e.preventDefault();\n  apiServise.query = e.currentTarget.elements.searchQuery.value;\n\n  clearMarkupPhotoCards();\n  apiServise.resetPage();\n\n  try {\n    const data = await apiServise.fetchPhotoCards();\n\n    if (data.total === 0 || !apiServise.query) {\n      return notify.onFetchError();\n    }\n\n    notify.onTotalPhotoCards(data.totalHits);\n    createMarkupPhotoCards(data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nconst onEntry = entries => {\n  entries.forEach(async entry => {\n    if (entry.isIntersecting && apiServise.query) {\n      const data = await apiServise.fetchPhotoCards();\n\n      createMarkupPhotoCards(data);\n\n      if (data.totalHits <= apiServise.currentPage * apiServise.per_page) {\n        observer.unobserve(refs.sentinel);\n        notify.onFinishPhotoCards();\n      }\n    }\n  });\n};\n\nconst options = {\n  rootMargin: '100px',\n};\n\nconst observer = new IntersectionObserver(onEntry, options);\nobserver.observe(refs.sentinel);\n"],"names":["$f3353f9eb86277b7$var$refs","$hdB2L","default","$f3353f9eb86277b7$var$apiServise","$4n29c","$f3353f9eb86277b7$var$notify","$eH4wg","$f3353f9eb86277b7$var$scroll","$bWgfq","searchForm","addEventListener","async","e","preventDefault","query","currentTarget","elements","searchQuery","value","$dLGpv","clearMarkupPhotoCards","resetPage","data","fetchPhotoCards","total","onFetchError","onTotalPhotoCards","totalHits","createMarkupPhotoCards","error","console","scrollToTop","document","handleScrollToTop","$f3353f9eb86277b7$var$observer","IntersectionObserver","entries","forEach","entry","isIntersecting","currentPage","per_page","unobserve","sentinel","onFinishPhotoCards","rootMargin","observe"],"version":3,"file":"02-infinite-scroll.b1790bca.js.map"}